Parameter,Details
"**repo_store_path**

``string``

Required","* The intended file path for offline repository data.
* Ensure the disk partition has enough space.
* Ensure that 755 permission is given to ``repo_store_path`` if user intends to use nfs share mount for ``repo_store_path``. 

**Default value**:  ``""/opt/omnia_repo""``"
"**user_repo_url**

``JSON List``

Optional","* This variable accepts the repository urls of the user which contains the packages required for the cluster.

* When ``repo_config`` is always, the given list will be configured on the control plane and packages required for cluster will be downloaded into a local repository.

* When ``repo_config`` is partial, a local repository is created on the control plane containing packages that are not part of the user's repository.

* When ``repo_config`` is never, no local repository is created and packages are downloaded on all cluster nodes.

* 'url' defines the baseurl for the repository.

* 'gpgkey' defines gpgkey for the repository. If 'gpgkey' is omitted then   gpgcheck=0 is set for that repository.

* **Sample value**: ``- {url: ""http://crb.com/CRB/x86_64/os/"",gpgkey: ""http://crb.com/CRB/x86_64/os/RPM-GPG-KEY""}``"
"**user_registry**

``JSON List``

Optional","* This variable accepts the registry url along with port of the user which contains the images required for cluster.

* When ``repo_config`` is always, the list given in ``user_registry`` will be configured on the control plane and packages required for cluster will be downloaded into a local repository. If the same repository is available in both the ``user_repo_url`` and the ``user_registry``, the repository will be configured using the values in ``user_registry``.

* When ``repo_config`` is partial, a local registry is created on the control plane containing packages that are not part of the ``user_registry``. Images listed in ``user_registry`` are directly configured as a mirror on compute nodes. Compute nodes are expected to connect to the URLs in the ``user_registry`` via http_proxy.

* When ``repo_config`` is never, no local registry is created and packages/images are downloaded on all cluster nodes.

* 'host' defines the URL and path to the registry.

* 'cert_path' defines the absolute path where the security certificates for each registry. If this path is not provided, insecure registries are configured.

* **Sample value**: ::

   - { host: 10.11.0.100:5001, cert_path: ""/home/ca.crt"" }
   - { host: registryhostname.registry.test, cert_path: """" }"
"**ubuntu_os_url**

``string``

Required","* Mandatory when ``cluster_os_type`` is ubuntu in ``softwares_config.json``.
* This variables defines the repos to be configured on all the compute nodes.
* When ``repo_config`` is always, partial or never, the given ubuntu_os_url configured via proxy in compute nodes.
* Online ``ubuntu_os_url`` for Ubuntu 22.04 or 24.04 is ""http://in.archive.ubuntu.com/ubuntu"".


* **Example**: When cluster_os_type is Ubuntu 22.04, ``ubuntu_os_url`` should be ""http://in.archive.ubuntu.com/ubuntu"""
"**omnia_repo_url_ubuntu**

``JSON List``

Required","* A list of all the repo urls from where deb packages will be downloaded for Omnia features on Ubuntu clusters.
* 'url' defines the baseurl for the repository.
* 'gpgkey' defines gpgkey for the repository. If 'gpgkey' is omitted, the repository will be marked as ""trusted"".
* On clusters running Ubuntu, if gpgkeys are not available, public keys are accepted in place of gpgkeys. However, the field public key cannot be left blank.
* This value is not validated by Omnia. Any errors can cause Omnia to fail.
* Ensure that all URLs listed below are reachable to the control plane.


**Default value**: ::

       - { url: ""https://download.docker.com/linux/ubuntu {{ os_release }} stable"", gpgkey: ""https://download.docker.com/linux/ubuntu/gpg"" }
       - { url: ""https://repo.radeon.com/rocm/apt/{{ rocm_version }} {{ os_release }} main"", gpgkey: ""https://repo.radeon.com/rocm/rocm.gpg.key"" }
       - { url: ""https://www.beegfs.io/release/beegfs_{{beegfs_version}} {{ os_release }} non-free"", gpgkey: ""https://www.beegfs.io/release/beegfs_{{beegfs_version}}/gpg/GPG-KEY-beegfs"" }
       - { url: ""https://repo.radeon.com/amdgpu/{{ amdgpu_version }}/ubuntu {{ os_release }} main"", gpgkey: ""https://repo.radeon.com/rocm/rocm.gpg.key"" }
       - { url: ""https://ltb-project.org/debian/openldap25/jammy jammy main"", publickey: ""https://ltb-project.org/documentation/_static/RPM-GPG-KEY-LTB-project"" }
       - { url: ""https://nvidia.github.io/libnvidia-container/stable/deb/amd64 /"", gpgkey: ""https://nvidia.github.io/libnvidia-container/gpgkey"" }
       - { url: ""http://ppa.launchpad.net/deadsnakes/ppa/ubuntu {{ os_release }} main"", gpgkey: """" }
       - { url: ""https://a2o.github.io/snoopy-packages/repo/ubuntu {{ os_release }} stable"", publickey: ""https://a2o.github.io/snoopy-packages/snoopy-packages-key.pub"" }
       - { url: ""https://vault.habana.ai/artifactory/debian {{ os_release }} main"", publickey: ""https://vault.habana.ai/artifactory/api/gpg/key/public"" }
         "
